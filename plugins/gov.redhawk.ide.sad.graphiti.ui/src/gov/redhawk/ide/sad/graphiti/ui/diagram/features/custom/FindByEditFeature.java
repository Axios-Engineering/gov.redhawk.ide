/*******************************************************************************
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package gov.redhawk.ide.sad.graphiti.ui.diagram.features.custom;

import gov.redhawk.ide.sad.graphiti.ui.diagram.util.DUtil;
import gov.redhawk.ide.sad.graphiti.ui.diagram.wizards.FindByCORBANameWizardPage;
import gov.redhawk.ide.sad.graphiti.ui.diagram.wizards.FindByServiceWizardPage;

import java.util.List;

import mil.jpeojtrs.sca.partitioning.DomainFinder;
import mil.jpeojtrs.sca.partitioning.DomainFinderType;
import mil.jpeojtrs.sca.partitioning.FindByStub;
import mil.jpeojtrs.sca.partitioning.NamingService;
import mil.jpeojtrs.sca.partitioning.PartitioningFactory;
import mil.jpeojtrs.sca.partitioning.ProvidesPortStub;
import mil.jpeojtrs.sca.partitioning.UsesPortStub;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.transaction.RecordingCommand;
import org.eclipse.emf.transaction.TransactionalCommandStack;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.ICustomContext;
import org.eclipse.graphiti.features.custom.AbstractCustomFeature;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.ui.PlatformUI;

public class FindByEditFeature extends AbstractCustomFeature {

	/*
	 * Constructor
	 */
	public FindByEditFeature(IFeatureProvider fp) {
		super(fp);
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.graphiti.features.custom.AbstractCustomFeature#getDescription()
	 */
	@Override
	public String getDescription() {
		return "Edit Find By";
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.graphiti.features.impl.AbstractFeature#getName()
	 */
	@Override
	public String getName() {
		return "&Edit Find By";
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.graphiti.features.custom.AbstractCustomFeature#canExecute(org.eclipse.graphiti.features.context.ICustomContext)
	 */
	// TODO: From Devin - set true only for FindByName, Service, and EventChannel, since only those are generated by a
	// wizard?
	@Override
	public boolean canExecute(ICustomContext context) {

		// We only want the edit context to show up for certain objects
		PictogramElement[] pes = context.getPictogramElements();
		if (pes != null && pes.length == 1) {
			FindByStub findByStub = (FindByStub) DUtil.getBusinessObject(context.getPictogramElements()[0]);
			DomainFinderType type = (findByStub.getDomainFinder() != null) ? findByStub.getDomainFinder().getType() : null;
			if (findByStub.getNamingService() != null || DomainFinderType.SERVICENAME.equals(type) || DomainFinderType.SERVICETYPE.equals(type)
				|| DomainFinderType.EVENTCHANNEL.equals(type)) {
				return true;
			}
		}
		return false;
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.graphiti.features.custom.ICustomFeature#execute(org.eclipse.graphiti.features.context.ICustomContext)
	 */
	@Override
	public void execute(ICustomContext context) {
		PictogramElement pe = context.getPictogramElements()[0];
		Object obj = DUtil.getBusinessObject(pe);
		final FindByStub findByStub = (FindByStub) obj;

		// Create the edit wizard to be used
		Wizard editWizard = new Wizard() {
			public boolean performFinish() {
				return true;
			}
		};

		if (findByStub.getNamingService() != null) { // Find By CORBA Name
			// Grab existing properties from findByStub
			String corbaName = findByStub.getNamingService().getName();
			EList<UsesPortStub> usesPorts = findByStub.getUses();
			EList<ProvidesPortStub> providesPorts = findByStub.getProvides();

			FindByCORBANameWizardPage page = new FindByCORBANameWizardPage();
			editWizard.addPage(page);
			WizardDialog dialog = new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), editWizard);

			// Fill wizard fields with existing properties
			page.getModel().setCorbaName(corbaName);
			if (usesPorts != null && !usesPorts.isEmpty()) {
				for (UsesPortStub port : usesPorts) {
					page.getModel().getUsesPortNames().add(port.getName());
				}
			}
			if (providesPorts != null && !providesPorts.isEmpty()) {
				for (ProvidesPortStub port : providesPorts) {
					page.getModel().getProvidesPortNames().add(port.getName());
				}
			}

			if (dialog.open() == WizardDialog.CANCEL) {
				return;
			}

			// get user selections
			NamingService namingService = findByStub.getNamingService();
			final String corbaNameText = page.getModel().getCorbaName();
			final List<String> usesPortNames = (page.getModel().getUsesPortNames() != null && !page.getModel().getUsesPortNames().isEmpty()) ? page.getModel().getUsesPortNames()
				: null;
			final List<String> providesPortNames = (page.getModel().getProvidesPortNames() != null && !page.getModel().getProvidesPortNames().isEmpty()) ? page.getModel().getProvidesPortNames()
				: null;

			namingService.setName(corbaNameText);

			// if applicable add uses port stub(s)
			if (usesPortNames != null) {
				findByStub.getUses().clear();
				for (String usesPortName : usesPortNames) {
					UsesPortStub usesPortStub = PartitioningFactory.eINSTANCE.createUsesPortStub();
					usesPortStub.setName(usesPortName);
					findByStub.getUses().add(usesPortStub);
				}
			}

			// if applicable add provides port stub(s)
			if (providesPortNames != null) {
				findByStub.getProvides().clear();
				for (String providesPortName : providesPortNames) {
					ProvidesPortStub providesPortStub = PartitioningFactory.eINSTANCE.createProvidesPortStub();
					providesPortStub.setName(providesPortName);
					findByStub.getProvides().add(providesPortStub);
				}
			}
		} else if (findByStub.getDomainFinder() != null) { // Find By Service
			DomainFinderType type = findByStub.getDomainFinder().getType();
			if (DomainFinderType.SERVICENAME.equals(type) || DomainFinderType.SERVICETYPE.equals(type)) {
				// TODO: A lot of redundant code with FindByServicePattern. Is there a way to reuse?
				// Grab existing properties from findByStub
				final String serviceName = findByStub.getDomainFinder().getName();
				EList<UsesPortStub> usesPorts = findByStub.getUses();
				EList<ProvidesPortStub> providesPorts = findByStub.getProvides();

				FindByServiceWizardPage page = new FindByServiceWizardPage();
				editWizard.addPage(page);
				WizardDialog dialog = new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), editWizard);

				// Fill wizard fields with existing properties
				if (type.equals(DomainFinderType.SERVICENAME)) {
					page.getModel().setServiceName(serviceName);
					page.getModel().setEnableServiceName(true);
					page.getModel().setEnableServiceType(false);
				} else {
					page.getModel().setServiceType(serviceName);
					page.getModel().setEnableServiceType(true);
					page.getModel().setEnableServiceName(false);
				}
				if (usesPorts != null && !usesPorts.isEmpty()) {
					for (UsesPortStub port : usesPorts) {
						page.getModel().getUsesPortNames().add(port.getName());
					}
				}
				if (providesPorts != null && !providesPorts.isEmpty()) {
					for (ProvidesPortStub port : providesPorts) {
						page.getModel().getProvidesPortNames().add(port.getName());
					}
				}

				// Open Wizard
				if (dialog.open() == WizardDialog.CANCEL) {
					return;
				}

				// Push any new values to the FindByStub object
				final DomainFinder domainFinder = findByStub.getDomainFinder();
				final String serviceNameText = page.getModel().getEnableServiceName() ? page.getModel().getServiceName() : null;
				final String serviceTypeText = page.getModel().getEnableServiceType() ? page.getModel().getServiceType() : null;
				final List<String> usesPortNames = (page.getModel().getUsesPortNames() != null && !page.getModel().getUsesPortNames().isEmpty()) ? page.getModel().getUsesPortNames()
					: null;
				final List<String> providesPortNames = (page.getModel().getProvidesPortNames() != null && !page.getModel().getProvidesPortNames().isEmpty()) ? page.getModel().getProvidesPortNames()
					: null;

				// editing domain for our transaction
				TransactionalEditingDomain editingDomain = getFeatureProvider().getDiagramTypeProvider().getDiagramBehavior().getEditingDomain();
				// Create Component Related objects in SAD model
				TransactionalCommandStack stack = (TransactionalCommandStack) editingDomain.getCommandStack();
				stack.execute(new RecordingCommand(editingDomain) {

					@Override
					protected void doExecute() {
						if (serviceNameText != null && !serviceNameText.isEmpty() && !serviceNameText.equals(serviceName)) {
							domainFinder.setType(DomainFinderType.SERVICENAME);
							domainFinder.setName(serviceNameText);
						} else if (serviceTypeText != null && !serviceTypeText.isEmpty()) {
							domainFinder.setType(DomainFinderType.SERVICETYPE);
							domainFinder.setName(serviceTypeText);
						}

						// if applicable add uses port stub(s)
						for (int i = 0; i < findByStub.getUses().size(); i++) {
							UsesPortStub port = findByStub.getUses().get(i);
							EcoreUtil.delete(port);
						}
						findByStub.getUses().clear();
						if (usesPortNames != null) {
							for (String usesPortName : usesPortNames) {
								UsesPortStub usesPortStub = PartitioningFactory.eINSTANCE.createUsesPortStub();
								usesPortStub.setName(usesPortName);
								findByStub.getUses().add(usesPortStub);
							}
						}

						// if applicable add provides port stub(s)
						for (int i = 0; i < findByStub.getProvides().size(); i++) {
							ProvidesPortStub port = findByStub.getProvides().get(i);
							EcoreUtil.delete(port);
						}
						findByStub.getProvides().clear();
						if (providesPortNames != null) {
							for (String providesPortName : providesPortNames) {
								ProvidesPortStub providesPortStub = PartitioningFactory.eINSTANCE.createProvidesPortStub();
								providesPortStub.setName(providesPortName);
								findByStub.getProvides().add(providesPortStub);
							}
						}
					}
				});

				DUtil.updateShapeViaFeature(getFeatureProvider(), getDiagram(), pe);

			}
			if (DomainFinderType.EVENTCHANNEL.equals(type)) { // Find By Event Channel
				// TODO: Handle Find by Event Channel editor
			}
		}

	}

}
