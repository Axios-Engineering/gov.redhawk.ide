@Ecore(nsURI="http://www.redhawk.gov/model/rhgext/1.0.0")
@GenModel(prefix="RHGx")
@GenModel(contentTypeIdentifier="http://www.redhawk.gov/model/rhgext/1.0.0")
@GenModel(operationReflection="false")
//prevents custom coding from getting blown away
@GenModel(modelDirectory="/gov.redhawk.ide.sad.graphiti.ui/src") 

package gov.redhawk.ide.sad.graphiti.ext

import org.eclipse.graphiti.mm.pictograms.ContainerShape
import org.eclipse.graphiti.features.IFeatureProvider
import org.eclipse.graphiti.mm.algorithms.styles.Style
import org.eclipse.graphiti.features.impl.Reason
import mil.jpeojtrs.sca.partitioning.ComponentSupportedInterfaceStub
import mil.jpeojtrs.sca.partitioning.ProvidesPortStub
import mil.jpeojtrs.sca.partitioning.UsesPortStub
import mil.jpeojtrs.sca.sad.SadComponentInstantiation
import mil.jpeojtrs.sca.sad.Port
import mil.jpeojtrs.sca.sad.AssemblyController
import mil.jpeojtrs.sca.sad.ExternalPorts
import org.eclipse.emf.ecore.EEList
import org.eclipse.emf.ecore.EObject
import java.util.List



type ComponentSupportedInterfaceStub wraps ComponentSupportedInterfaceStub
type IFeatureProvider wraps IFeatureProvider
type UsesPortStub wraps UsesPortStub
type ProvidesPortStub wraps ProvidesPortStub
type Port wraps Port
type AssemblyController wraps AssemblyController
type ExternalPorts wraps ExternalPorts
type Reason wraps Reason
type List<Port> wraps List
type SadComponentInstantiation wraps SadComponentInstantiation


interface ContainerShapeImpl wraps ContainerShape {}


class RHContainerShape extends ContainerShape{
	
	op void init(ContainerShape targetContainerShape, String outerText, List<EObject> businessObjects, 
			IFeatureProvider featureProvider, String outerImageId, Style outerContainerStyle, String innerText, String innerImageId,
			Style innerContainerStyle,
			ComponentSupportedInterfaceStub interfaceStub,
			EEList<UsesPortStub> uses,
			EEList<ProvidesPortStub> provides, 
			List<Port> externalPorts)

	/*Returns providesPortsStubs business object list linked to getProvidesPortsContainerShape()*/
	op EEList<ProvidesPortStub> getProvidesPortStubs()

	
	/*performs a layout on the contents of this shape */
	op void layout()
	
	/*Updates the shape with supplied values */
	op Reason update(String outerText, 
		  Object businessObject, IFeatureProvider featureProvider, 
		  String outerImageId, Style outerContainerStyle, 
		  String innerText, String innerImageId, Style innerContainerStyle, 
		  ComponentSupportedInterfaceStub interfaceStub, EEList<UsesPortStub> uses, EEList<ProvidesPortStub> provides,
		  List<Port> externalPorts)
		  
	/*Checks if shape requires an update.  
	 * If update required returns Reason with true
	 * boolean value and message describing what needs to be updated
	 */
	op Reason updateNeeded(String outerText, 
		  Object businessObject, IFeatureProvider featureProvider, 
		  String outerImageId, Style outerContainerStyle, 
		  String innerText, String innerImageId, Style innerContainerStyle, 
		  ComponentSupportedInterfaceStub interfaceStub, EEList<UsesPortStub> uses, EEList<ProvidesPortStub> provides,
		  List<Port> externalPorts)
	
}

class ComponentShape extends RHContainerShape{
	
	op void init(ContainerShape targetContainerShape, SadComponentInstantiation ci, 
			IFeatureProvider featureProvider, ExternalPorts externalPorts,
			AssemblyController assemblyController)

	/*performs a layout on the contents of this shape */
	op void layout()
	
	/*Updates the shape with supplied values */
	op Reason update(SadComponentInstantiation ci, IFeatureProvider featureProvider, ExternalPorts externalPorts,
		AssemblyController assemblyController)
	
	/*Checks if shape requires an update.  
	 * If update required returns Reason with true
	 * boolean value and message describing what needs to be updated
	 */
	 op Reason updateNeeded(SadComponentInstantiation ci, IFeatureProvider featureProvider, ExternalPorts externalPorts,
	 	AssemblyController assemblyController)
}