/*******************************************************************************
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package gov.redhawk.ide.debug.provider;

import gov.redhawk.ide.debug.util.ScaDebugAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScaDebugItemProviderAdapterFactory extends ScaDebugAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ScaDebugItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalSca} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaItemProvider localScaItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalSca}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaAdapter() {
		if (localScaItemProvider == null) {
			localScaItemProvider = new LocalScaItemProvider(this);
		}

		return localScaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.NotifyingNamingContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotifyingNamingContextItemProvider notifyingNamingContextItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.NotifyingNamingContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotifyingNamingContextAdapter() {
		if (notifyingNamingContextItemProvider == null) {
			notifyingNamingContextItemProvider = new NotifyingNamingContextItemProvider(this);
		}

		return notifyingNamingContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameToObjectEntryItemProvider nameToObjectEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameToObjectEntryAdapter() {
		if (nameToObjectEntryItemProvider == null) {
			nameToObjectEntryItemProvider = new NameToObjectEntryItemProvider(this);
		}

		return nameToObjectEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameToNamingContextEntryItemProvider nameToNamingContextEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameToNamingContextEntryAdapter() {
		if (nameToNamingContextEntryItemProvider == null) {
			nameToNamingContextEntryItemProvider = new NameToNamingContextEntryItemProvider(this);
		}

		return nameToNamingContextEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalFileManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalFileManagerItemProvider localFileManagerItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalFileManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalFileManagerAdapter() {
		if (localFileManagerItemProvider == null) {
			localFileManagerItemProvider = new LocalFileManagerItemProvider(this);
		}

		return localFileManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalScaWaveform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaWaveformItemProvider localScaWaveformItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalScaWaveform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaWaveformAdapter() {
		if (localScaWaveformItemProvider == null) {
			localScaWaveformItemProvider = new LocalScaWaveformItemProvider(this);
		}

		return localScaWaveformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalScaComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaComponentItemProvider localScaComponentItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalScaComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaComponentAdapter() {
		if (localScaComponentItemProvider == null) {
			localScaComponentItemProvider = new LocalScaComponentItemProvider(this);
		}

		return localScaComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalScaDeviceManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaDeviceManagerItemProvider localScaDeviceManagerItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalScaDeviceManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaDeviceManagerAdapter() {
		if (localScaDeviceManagerItemProvider == null) {
			localScaDeviceManagerItemProvider = new LocalScaDeviceManagerItemProvider(this);
		}

		return localScaDeviceManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalScaExecutableDevice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaExecutableDeviceItemProvider localScaExecutableDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalScaExecutableDevice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaExecutableDeviceAdapter() {
		if (localScaExecutableDeviceItemProvider == null) {
			localScaExecutableDeviceItemProvider = new LocalScaExecutableDeviceItemProvider(this);
		}

		return localScaExecutableDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalScaLoadableDevice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaLoadableDeviceItemProvider localScaLoadableDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalScaLoadableDevice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaLoadableDeviceAdapter() {
		if (localScaLoadableDeviceItemProvider == null) {
			localScaLoadableDeviceItemProvider = new LocalScaLoadableDeviceItemProvider(this);
		}

		return localScaLoadableDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalScaDevice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaDeviceItemProvider localScaDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalScaDevice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaDeviceAdapter() {
		if (localScaDeviceItemProvider == null) {
			localScaDeviceItemProvider = new LocalScaDeviceItemProvider(this);
		}

		return localScaDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.ide.debug.LocalScaService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalScaServiceItemProvider localScaServiceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.ide.debug.LocalScaService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalScaServiceAdapter() {
		if (localScaServiceItemProvider == null) {
			localScaServiceItemProvider = new LocalScaServiceItemProvider(this);
		}

		return localScaServiceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (localScaItemProvider != null) localScaItemProvider.dispose();
		if (notifyingNamingContextItemProvider != null) notifyingNamingContextItemProvider.dispose();
		if (nameToObjectEntryItemProvider != null) nameToObjectEntryItemProvider.dispose();
		if (nameToNamingContextEntryItemProvider != null) nameToNamingContextEntryItemProvider.dispose();
		if (localFileManagerItemProvider != null) localFileManagerItemProvider.dispose();
		if (localScaWaveformItemProvider != null) localScaWaveformItemProvider.dispose();
		if (localScaComponentItemProvider != null) localScaComponentItemProvider.dispose();
		if (localScaDeviceManagerItemProvider != null) localScaDeviceManagerItemProvider.dispose();
		if (localScaExecutableDeviceItemProvider != null) localScaExecutableDeviceItemProvider.dispose();
		if (localScaLoadableDeviceItemProvider != null) localScaLoadableDeviceItemProvider.dispose();
		if (localScaDeviceItemProvider != null) localScaDeviceItemProvider.dispose();
		if (localScaServiceItemProvider != null) localScaServiceItemProvider.dispose();
	}

}
