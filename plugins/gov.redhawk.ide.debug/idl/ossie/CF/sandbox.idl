#ifndef _SANDBOX_IDL_
#define _SANDBOX_IDL_

#pragma prefix "redhawk.gov"
#include "ossie/CF/cf.idl"
#include <COS/CosNaming.idl>

module ExtendedCF {

        /**
         * Descriptor for resources within the domain
         */
        struct ResourceDesc {
            /**
             * The Object this resource describes
             */
            CF::Resource resource;
            
            /**
             * The id of this resource's profile
             */
            string profile;
        };

        /**
         * Interface to the Sandbox
         */
        interface Sandbox {
            /**
             * Enumeration of depths types
             */
        	enum Depth {
        	    /**
        	     * This object and and all child objects 
        	     */
				FULL,
				/*
				 * This object only
				 */
				SELF
			};
        		
        	/**
        	 * ID for DataType that signifies the launch mode to create a resource in
        	 */
    		const string LAUNCH_TYPE = "__launchType";
	
			/**
			 * Value of launch data type signifying to launch resource in Debug Launch Mode
			 */
			const string LAUNCH_TYPE_DEBUG = "debug";
			/**
			 * Value of launch data type signifying to launch resource in (standard) run Launch Mode
			 */
			const string LAUNCH_TYPE_RUN = "run";
    
            typedef sequence<ResourceDesc> ResourceDescSequence;
            typedef sequence<string> ProfileDescSequence;
           
            /**
             * Resolves to a NamingContext that elements should be bound to in order to appear in this container
             */
            readonly attribute CosNaming::NamingContext namingContext;
            
            /**
             * Resolves to a CF::DeviceManager that CF::Device elements should register with to appear in the container
             */
            readonly attribute CF::DeviceManager deviceManager;
            
            /**
             * Current SCA profiles (as defined in appendix D) that are available
             */
            readonly attribute ProfileDescSequence availableProfiles;
            
            /**
             * File Manager for the Sandbox
             */
            readonly attribute CF::FileManager fileManager;

            /**
             * Resources currently registered with the system.
             */
            readonly attribute ResourceDescSequence registeredResources;
            
            /**
             * Get the resource factory of the given type
             * @param identifier an profile id as found in availableProfiles
             */
            CF::ResourceFactory getResourceFactory(in string identifier);
            
            /**
             * Get the resource factory of the given profile
             * @param identifier an profile id as found in availableProfiles
             */
            CF::ResourceFactory getResourceFactoryByProfile(in string profile);
            
            /**
             * Tell the sandbox to refresh the state of the object
             * @param obj The object to refresh
             * @param dpth The depth to which to refresh this object
             */
            void refresh(in Object obj, in Depth dpth);
        };
       
};

#endif
