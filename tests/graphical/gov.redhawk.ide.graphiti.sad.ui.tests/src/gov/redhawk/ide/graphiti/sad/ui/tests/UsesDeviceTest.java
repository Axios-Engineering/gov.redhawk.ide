/*******************************************************************************
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package gov.redhawk.ide.graphiti.sad.ui.tests;

import gov.redhawk.ide.graphiti.ext.impl.RHContainerShapeImpl;
import gov.redhawk.ide.graphiti.ui.diagram.util.DUtil;
import gov.redhawk.ide.swtbot.WaveformUtils;
import gov.redhawk.ide.swtbot.diagram.AbstractGraphitiTest;
import gov.redhawk.ide.swtbot.diagram.DiagramTestUtils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import mil.jpeojtrs.sca.partitioning.UsesDeviceStub;

import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;
import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;
import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotCombo;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotShell;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotText;
import org.junit.Assert;
import org.junit.Test;

public class UsesDeviceTest extends AbstractGraphitiTest {

	private SWTBotGefEditor editor;
	private String waveformName;
	
	/**
	 * IDE-124
	 * Create the pictogram shape in the waveform diagram that represents the generic use frontend tuner device.
	 * This includes the ContainerShape for the component, labels for Usage Name and ID, port shapes and labels
	 */
	@Test
	public void checkUseGenericFrontEndTunerDevicePictogramElements() {
		waveformName = "IDE-124-CreateAndDeleteUseGenericFrontEndTunerDeviceTest";

		// Create an empty waveform project
		WaveformUtils.createNewWaveform(gefBot, waveformName);
		editor = gefBot.gefEditor(waveformName);
		editor.setFocus();

		//generate generic use frontent tuner device with listen by id
		String usesDeviceId = "FrontEndTuner_1"; //auto generated by wizard
		String existingAllocationId = "12345";
		String newAllocationId = "678910";
		createGenericFrontEndTunerDeviceListenById(existingAllocationId, newAllocationId);

		editor.setFocus();

		// Confirm created component truly is Generic FrontEnd Tuner
		SWTBotGefEditPart frontEndTunerGefEditPart = editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE);
		assertFrontEndTuner(frontEndTunerGefEditPart);

		RHContainerShapeImpl rhContainerShape = (RHContainerShapeImpl) frontEndTunerGefEditPart.part().getModel();

		// two provides ports, two uses ports
		Assert.assertTrue(rhContainerShape.getUsesPortStubs().size() == 2 && rhContainerShape.getProvidesPortStubs().size() == 2);

		// Both ports are of type dataDouble
		Assert.assertEquals(rhContainerShape.getUsesPortStubs().get(0).getName(), "dataDouble_out");
		Assert.assertEquals(rhContainerShape.getUsesPortStubs().get(1).getName(), "dataDouble2_out");
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(0).getName(), "dataDouble_in");
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(1).getName(), "dataDouble2_in");

		// Check to see if xml is correct in the sad.xml
		final String usesDeviceXML = regexStringForGenericUseFrontEndTunerDeviceListenById(
			usesDeviceId, existingAllocationId, newAllocationId);
		DiagramTestUtils.openTabInEditor(editor, waveformName + ".sad.xml");
		String editorText = editor.toTextEditor().getText();
		Assert.assertTrue("The sad.xml should include UsesDevice", editorText.matches(usesDeviceXML));
		DiagramTestUtils.openTabInEditor(editor, "Diagram");

		//delete
		DiagramTestUtils.deleteFromDiagram(editor, editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE));

		//verify deleted
		Assert.assertNull(editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE));
	}

	/**
	 * IDE-124
	 * Create the pictogram shape in the waveform diagram that represents the generic use frontend tuner device.
	 * This includes the ContainerShape for the component, labels for Usage Name and ID, port shapes and labels
	 */
	@Test
	public void checkUse_sim_rx_digitizer_FrontEndTunerDevicePictogramElements() {
		waveformName = "IDE-124-CreateAndDeleteUse_im_rx_digitizer_FrontEndTunerDeviceTest";

		// Create an empty waveform project
		WaveformUtils.createNewWaveform(gefBot, waveformName);
		editor = gefBot.gefEditor(waveformName);
		editor.setFocus();

		//generate generic use frontent tuner device with listen by id
		String usesDeviceId = "sim_RX_DIGITIZER_1"; //auto generated by wizard
		String tunerType = "RX_DIGITIZER";
		String newAllocationId = "678910";
		String centerFreqency = "5";
		String bandwidth = "1";
		String bandwidthTolerance = "20.0";
		String sampleRate = "1";
		String sampleRateTolerance = "20.0";
		String deviceControl = "true";
		// IDE-1060 added group ID
		String groupId = "group1";
		String rfFlowId = "";
		String mhz = "000000.0";
		create_sim_rx_digitizer_FrontEndTunerDeviceControlTuner(tunerType, newAllocationId, centerFreqency, bandwidth, sampleRate, groupId);

		editor.setFocus();

		// Confirm created component truly is Generic FrontEnd Tuner
		SWTBotGefEditPart frontEndTunerGefEditPart = editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE);
		assertFrontEndTuner(frontEndTunerGefEditPart);

		RHContainerShapeImpl rhContainerShape = (RHContainerShapeImpl) frontEndTunerGefEditPart.part().getModel();

		// two provides ports, one uses ports
		Assert.assertTrue(rhContainerShape.getProvidesPortStubs().size() == 2 && rhContainerShape.getUsesPortStubs().size() == 1);

		// verify port labels
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(0).getName(), "RFInfo_in");
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(1).getName(), "DigitalTuner_in");
		Assert.assertEquals(rhContainerShape.getUsesPortStubs().get(0).getName(), "dataShort_out");

		// Check to see if xml is correct in the sad.xml
		Map<String, String> params = new HashMap<String, String>();
		params.put("usesDeviceId", usesDeviceId);
		params.put("tunerType", tunerType);
		params.put("newAllocationId", newAllocationId);
		params.put("centerFrequency", centerFreqency + mhz);
		params.put("bandwidth", bandwidth + mhz);
		params.put("bandwidthTolerance", bandwidthTolerance);
		params.put("sampleRate", sampleRate + mhz);
		params.put("sampleRateTolerance", sampleRateTolerance);
		params.put("deviceControl", deviceControl);
		params.put("groupId", groupId);
		params.put("rfFlowId", rfFlowId);
		final String usesDeviceXML = regexStringFor_sim_rx_digitizer_UseFrontEndTunerDeviceControlTuner(params);
		DiagramTestUtils.openTabInEditor(editor, waveformName + ".sad.xml");
		String editorText = editor.toTextEditor().getText();
		Assert.assertTrue("The sad.xml should include UsesDevice", editorText.matches(usesDeviceXML));
		DiagramTestUtils.openTabInEditor(editor, "Diagram");

		//delete
		DiagramTestUtils.deleteFromDiagram(editor, editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE));

		//verify deleted
		Assert.assertNull(editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE));
	}

	/**
	 * IDE-124
	 * Edit existing UsesFrontEndTuner name, model and ports
	 * Change names, add & remove ports
	 */
	@Test
	public void editGenericFrontEndTunerDevice() {
		waveformName = "IDE-124-editGenericFrontEndTunerDevice";

		// Create an empty waveform project
		WaveformUtils.createNewWaveform(gefBot, waveformName);
		editor = gefBot.gefEditor(waveformName);
		editor.setFocus();

		//generate generic use frontent tuner device with listen by id
		final String usesDeviceId = "FrontEndTuner_1"; //auto generated by wizard
		final String existingAllocationId = "12345";
		final String newAllocationId = "678910";
		final String SIGGEN = "SigGen";
		final String HARD_LIMIT = "HardLimit";


		// Add components to diagram
		DiagramTestUtils.addFromPaletteToDiagram(editor, SIGGEN, 200, 0);
		DiagramTestUtils.addFromPaletteToDiagram(editor, HARD_LIMIT, 500, 300);

		// Add Uses Generic FrontEnd Device
		createGenericFrontEndTunerDeviceListenById(existingAllocationId, newAllocationId);

		editor.setFocus();

		// Get a handle on ports
		SWTBotGefEditPart sigGenUsesPart = DiagramTestUtils.getDiagramUsesPort(editor, SIGGEN);
		SWTBotGefEditPart hardLimitProvidesPart = DiagramTestUtils.getDiagramProvidesPort(editor, HARD_LIMIT);
		SWTBotGefEditPart usesDeviceProvidesDoublePart = DiagramTestUtils.getDiagramProvidesPort(editor, SadTestUtils.USE_FRONTEND_TUNER_DEVICE, "dataDouble_in");
		SWTBotGefEditPart usesDeviceProvidesDouble2Part = DiagramTestUtils.getDiagramProvidesPort(editor, SadTestUtils.USE_FRONTEND_TUNER_DEVICE, "dataDouble2_in");
		SWTBotGefEditPart usesDeviceUsesDoublePart = DiagramTestUtils.getDiagramUsesPort(editor, SadTestUtils.USE_FRONTEND_TUNER_DEVICE, "dataDouble_out");
		SWTBotGefEditPart usesDeviceUsesDouble2Part = DiagramTestUtils.getDiagramUsesPort(editor, SadTestUtils.USE_FRONTEND_TUNER_DEVICE, "dataDouble2_out");

		//maximize window
		DiagramTestUtils.maximizeActiveWindow(gefBot);
				
		//draw 4 connections
		Assert.assertTrue("Failed to make connection to Uses Device provides port 1", 
			DiagramTestUtils.drawConnectionBetweenPorts(editor, sigGenUsesPart, usesDeviceProvidesDoublePart));
		Assert.assertTrue("Failed to make connection to Uses Device provides port 2", 
			DiagramTestUtils.drawConnectionBetweenPorts(editor, sigGenUsesPart, usesDeviceProvidesDouble2Part));
		Assert.assertTrue("Failed to make connection from Uses Device uses port 1", 
			DiagramTestUtils.drawConnectionBetweenPorts(editor, usesDeviceUsesDoublePart, hardLimitProvidesPart));
		Assert.assertTrue("Failed to make connection from Uses Device uses port 2", 
			DiagramTestUtils.drawConnectionBetweenPorts(editor, usesDeviceUsesDouble2Part, hardLimitProvidesPart));

		// Open USE_FRONTEND_TUNER_DEVICE edit wizard and change name, remove existing port, and add a new one
		editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE).select();
		editor.clickContextMenu("Edit Uses FrontEnd Device");

		// Change Name
		gefBot.textWithLabel("Uses Device Id").setText(usesDeviceId + "x");

		//set model
		gefBot.textWithLabel("Device Model (optional)").setText("someModel");
		gefBot.button("&Next >").click();

		//change existing tuner allocation ID
		gefBot.textWithLabel("Existing Tuner Allocation ID").setText(existingAllocationId + "x");
		gefBot.button("&Next >").click();

		// Delete existing provides port
		gefBot.list(0).select(0); //dataDouble_in
		gefBot.button(1).click();

		// Add new provides port
		gefBot.textInGroup("Port(s) to use for connections", 0).setText("newProvides");
		gefBot.button(0).click();

		// Delete existing provides port
		gefBot.list(1).select(0); //dataDouble_out
		gefBot.button(3).click();

		// Add new uses port
		gefBot.textInGroup("Port(s) to use for connections", 1).setText("newUses");
		gefBot.button(2).click();

		gefBot.button("Finish").click();

		// Confirm that changes were made
		// Confirm created component truly is Generic FrontEnd Tuner
		SWTBotGefEditPart frontEndTunerGefEditPart = editor.getEditPart(SadTestUtils.USE_FRONTEND_TUNER_DEVICE);
		assertFrontEndTuner(frontEndTunerGefEditPart);

		RHContainerShapeImpl rhContainerShape = (RHContainerShapeImpl) frontEndTunerGefEditPart.part().getModel();

		// two provides ports, two uses ports
		Assert.assertTrue(rhContainerShape.getUsesPortStubs().size() == 2 && rhContainerShape.getProvidesPortStubs().size() == 2);

		// Verify ports
		Assert.assertEquals(rhContainerShape.getUsesPortStubs().get(0).getName(), "dataDouble2_out");
		Assert.assertEquals(rhContainerShape.getUsesPortStubs().get(1).getName(), "newUses");
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(0).getName(), "dataDouble2_in");
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(1).getName(), "newProvides");

		// Check to see if xml is correct in the sad.xml
		final String usesDeviceXML = regexStringForGenericUseFrontEndTunerDeviceListenById(
			usesDeviceId + "x", existingAllocationId + "x", newAllocationId);
		DiagramTestUtils.openTabInEditor(editor, waveformName + ".sad.xml");
		String editorText = editor.toTextEditor().getText();
		Assert.assertTrue("The sad.xml should include UsesDevice", editorText.matches(usesDeviceXML));
		DiagramTestUtils.openTabInEditor(editor, "Diagram");

		// Confirm that connections properly removed
		sigGenUsesPart = DiagramTestUtils.getDiagramUsesPort(editor, SIGGEN);
		List<SWTBotGefConnectionEditPart> connections = DiagramTestUtils.getSourceConnectionsFromPort(editor, sigGenUsesPart);
		Assert.assertTrue("SigGen should only have a single connection", connections.size() == 1);

		hardLimitProvidesPart = DiagramTestUtils.getDiagramProvidesPort(editor, HARD_LIMIT);
		connections = DiagramTestUtils.getTargetConnectionsFromPort(editor, hardLimitProvidesPart);
		Assert.assertTrue("HardLimit should only have a single connection", connections.size() == 1);

	}
	
	
	/**
	 * IDE-124
	 * Modify XML of FrontEndDevice and take out portion that identifies it as FrontEnd, 
	 * then use the edit wizard for the device
	 * Change name, add & remove ports
	 * This test ensures the allocation wizard page no longer shows when the FrontEnd propery is missing
	 */
	@Test
	public void editDevice() {
		waveformName = "IDE-124-editUsesDevice";

		// Create an empty waveform project
		WaveformUtils.createNewWaveform(gefBot, waveformName);
		editor = gefBot.gefEditor(waveformName);
		editor.setFocus();

		//generate generic use frontent tuner device with listen by id
		final String usesDeviceId = "FrontEndTuner_1"; //auto generated by wizard
		final String existingAllocationId = "12345";
		final String newAllocationId = "678910";
		
		// Add Uses Generic FrontEnd Device
		createGenericFrontEndTunerDeviceListenById(existingAllocationId, newAllocationId);
		
		editor.setFocus();

		// Remove FRONTENT::TUNER from sad.xml
		DiagramTestUtils.openTabInEditor(editor, waveformName + ".sad.xml");
		String editorText = editor.toTextEditor().getText();
		editorText = editorText.replace("<propertyref refid=\"DCE:cdc5ee18-7ceb-4ae6-bf4c-31f983179b4d\" value=\"FRONTEND::TUNER\"/>", "");
		editor.toTextEditor().setText(editorText);
		
		//display diagram tab
		DiagramTestUtils.openTabInEditor(editor, "Diagram");
		
		// Open edit wizard and change name, remove existing port, and add a new one
		editor.getEditPart(SadTestUtils.USE_DEVICE).select();
		editor.clickContextMenu("Edit Uses Device");

		// Change Name
		gefBot.textWithLabel("Uses Device Id").setText(usesDeviceId + "x");
		gefBot.button("&Next >").click();

		// Delete existing provides port
		gefBot.list(0).select(0); //dataDouble_in
		gefBot.button(1).click();
		
		// Add new provides port
		gefBot.textInGroup("Port(s) to use for connections", 0).setText("newProvides");
		gefBot.button(0).click();
		
		// Delete existing provides port
		gefBot.list(1).select(0); //dataDouble_out
		gefBot.button(3).click();
		
		// Add new uses port
		gefBot.textInGroup("Port(s) to use for connections", 1).setText("newUses");
		gefBot.button(2).click();

		gefBot.button("Finish").click();
		
		// Confirm that changes were made
		SWTBotGefEditPart useDeviceEditPart = editor.getEditPart(SadTestUtils.USE_DEVICE);
		SadTestUtils.assertUsesDevice(useDeviceEditPart);

		RHContainerShapeImpl rhContainerShape = (RHContainerShapeImpl) useDeviceEditPart.part().getModel();

		// two provides ports, two uses ports
		Assert.assertTrue(rhContainerShape.getUsesPortStubs().size() == 2 && rhContainerShape.getProvidesPortStubs().size() == 2);

		// Verify ports
		Assert.assertEquals(rhContainerShape.getUsesPortStubs().get(0).getName(), "dataDouble2_out");
		Assert.assertEquals(rhContainerShape.getUsesPortStubs().get(1).getName(), "newUses");
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(0).getName(), "dataDouble2_in");
		Assert.assertEquals(rhContainerShape.getProvidesPortStubs().get(1).getName(), "newProvides");

	}

	/**
	 * Assert FrontEnd Tuner
	 * @param gefEditPart
	 */
	private void assertFrontEndTuner(SWTBotGefEditPart gefEditPart) {
		Assert.assertNotNull(gefEditPart);
		// Drill down to graphiti component shape
		RHContainerShapeImpl rhContainerShape = (RHContainerShapeImpl) gefEditPart.part().getModel();

		// Grab the associated business object and confirm it is a UsesDeviceStub
		Object bo = DUtil.getBusinessObject(rhContainerShape);
		Assert.assertTrue("business object should be of type UsesDeviceStub", bo instanceof UsesDeviceStub);
		UsesDeviceStub usesDeviceStub = (UsesDeviceStub) bo;

		// Run assertions on expected properties
		Assert.assertEquals("outer text should match shape type", SadTestUtils.USE_FRONTEND_TUNER_DEVICE, rhContainerShape.getOuterText().getValue());
		Assert.assertEquals("inner text should match usesdevice id", usesDeviceStub.getUsesDevice().getId(), rhContainerShape.getInnerText().getValue());
		Assert.assertNotNull("component supported interface graphic should not be null", rhContainerShape.getLollipop());

	}
	
	/**
	 * Checks sad.xml for generic uses device code listen by id
	 * @param componentShape
	 * @return
	 */
	private String regexStringForGenericUseFrontEndTunerDeviceListenById(String usesDeviceId, String existingAllocationId, String allocationId) {
		String usesDevice = "<usesdevice id=\"" + usesDeviceId + "\">";
		String propertyRef = "<propertyref refid=\"DCE:cdc5ee18-7ceb-4ae6-bf4c-31f983179b4d\" value=\"FRONTEND::TUNER\"/>";
		String structRef = "<structref refid=\"FRONTEND::listener_allocation\">";
		String simpleRef1 = "<simpleref refid=\"FRONTEND::listener_allocation::existing_allocation_id\" value=\"" + existingAllocationId + "\"/>";
		String simpleRef2 = "<simpleref refid=\"FRONTEND::listener_allocation::listener_allocation_id\" value=\"" + allocationId + "\"/>";

		return "(?s).*" + usesDevice + ".*" + propertyRef + ".*" + structRef + ".*" + simpleRef1 + ".*" + simpleRef2 + ".*";
	}
	
	/**
	 * Create a Generic Uses FrontEnt Tuner device
	 * Uses auto generated uses device id
	 * @param existingAllocationId
	 * @param newAllocationId
	 */
	private void createGenericFrontEndTunerDeviceListenById(String existingAllocationId, String newAllocationId) {
		DiagramTestUtils.addUseFrontEndTunerDeviceToDiagram(gefBot, editor);
		
		SWTBotShell allocateTunerShell = gefBot.shell("Allocate Tuner");
		allocateTunerShell.setFocus();
		//click next, Generic FrontEnd Device already selected
		gefBot.button("&Next >").click();
		//stick with the default values
		gefBot.button("&Next >").click();
		//switch to Listen by id
		SWTBotCombo comboField = gefBot.comboBox(0); //Allocation
		comboField.setFocus();
		comboField.setSelection("Listen to Existing Tuner by Id");
		//provide existing tuner allocation id
		SWTBotText existingTunerAllocationIdText = gefBot.textWithLabel("Existing Tuner Allocation ID");
		existingTunerAllocationIdText.setFocus();
		existingTunerAllocationIdText.typeText(existingAllocationId);
		//provide allocation id
		SWTBotText newAllocationIdText = gefBot.textWithLabel("New Allocation ID");
		newAllocationIdText.setFocus();
		newAllocationIdText.typeText(newAllocationId);
		gefBot.button("&Next >").click();
		//add two uses and two provides ports
		//provides
		String[] providesPorts = {"deleteMe", "dataDouble_in", "dataDouble2_in"};
		for (int i = 0; i < providesPorts.length; i++) { 
			gefBot.textInGroup("Port(s) to use for connections", 0).setText(providesPorts[i]);
			gefBot.button(0).click(); //add provides port
		}
		//remove the first added port
		gefBot.list(0).select(0); //delete me
		gefBot.button(1).click(); //remove provides port
		
		//uses
		String[] usesPorts = {"deleteMeOut", "dataDouble_out", "dataDouble2_out"};
		for (int i = 0; i < usesPorts.length; i++) { 
			gefBot.textInGroup("Port(s) to use for connections", 1).setText(usesPorts[i]);
			gefBot.button(2).click(); //add uses port
		}
		//remove the first added port
		gefBot.list(1).select(0); //delete me
		gefBot.button(3).click(); //remove provides port
		
		//finish
		gefBot.button("&Finish").click();
	}
	
	/**
	 * Create a Generic Uses FrontEnt Tuner device that has tuner control
	 * Uses auto generated uses device id
	 * @param existingAllocationId
	 * @param newAllocationId
	 */
	private void create_sim_rx_digitizer_FrontEndTunerDeviceControlTuner(String tunerType, String newAllocationId, String centerFrequency, String bandwidth, String sampleRate, String groupId) {
		
		DiagramTestUtils.addUseFrontEndTunerDeviceToDiagram(gefBot, editor);
		
		SWTBotShell allocateTunerShell = gefBot.shell("Allocate Tuner");
		allocateTunerShell.setFocus();
		//select sim_RX_DIGITIZER
		gefBot.table(0).getTableItem("sim_RX_DIGITIZER (/devices/sim_RX_DIGITIZER/)").select(); //sim_RX_DIGITIZER
		gefBot.button("&Next >").click();
		//assert device model set
		Assert.assertEquals("Device Model should be empty by default", "RX_DIGITIZER simulator", gefBot.textWithLabel("Device Model (optional)").getText());
		//stick with the default values
		gefBot.button("&Next >").click();
		//control tuner already set by default
		
		SWTBotCombo tunerTypeComboField = gefBot.comboBox(1); //TunerType
		tunerTypeComboField.setFocus();
		tunerTypeComboField.setSelection(tunerType);
		//provide allocation id
		SWTBotText newAllocationIdText = gefBot.textWithLabel("New Allocation ID");
		newAllocationIdText.setFocus();
		newAllocationIdText.typeText(newAllocationId);
		//center frequency
		SWTBotText centerFrequencyText = gefBot.textWithLabel("Center Frequency (MHz)");
		centerFrequencyText.setFocus();
		centerFrequencyText.typeText(centerFrequency);
		//bandwidth
		SWTBotText bandwidthText = gefBot.textWithLabel("Bandwidth (MHz)");
		bandwidthText.setFocus();
		bandwidthText.typeText(bandwidth);
		//sample rate
		SWTBotText sampleRateText = gefBot.textWithLabel("Sample Rate (Msps)");
		sampleRateText.setFocus();
		sampleRateText.setText(""); //clear first because the focus method caused the wizard to pre-populate the field
		sampleRateText.typeText(sampleRate);
		// IDE-1060 added group ID
		SWTBotText groupIdText = gefBot.textWithLabel("Group ID");
		groupIdText.setFocus();
		groupIdText.setText(""); //clear first because the focus method caused the wizard to pre-populate the field
		groupIdText.typeText(groupId);
		
		gefBot.button("&Next >").click();
		
		//add two uses and two provides ports
		//provides
		Assert.assertEquals("Provides Port RFInfo_in not pre-populated", "RFInfo_in", gefBot.list(0).itemAt(0));
		Assert.assertEquals("Provides Port DigitalTuner_in not pre-populated", "DigitalTuner_in", gefBot.list(0).itemAt(1));
		//uses
		Assert.assertEquals("Uses Port dataShort_out not pre-populated", "dataShort_out", gefBot.list(1).itemAt(0));
		
		//finish
		gefBot.button("&Finish").click();
	}
	
	/**
	 * Checks sad.xml for generic uses device code listen by id
	 * @param componentShape
	 * @return
	 */
	private String regexStringFor_sim_rx_digitizer_UseFrontEndTunerDeviceControlTuner(final Map<String, String> params) {
		final String usesDeviceId = params.get("usesDeviceId");
		final String tunerType = params.get("tunerType");
		final String allocationId = params.get("newAllocationId");
		final String centerFrequency = params.get("centerFrequency");
		final String bandwidth = params.get("bandwidth");
		final String bandwidthTolerance = params.get("bandwidthTolerance");
		final String sampleRate = params.get("sampleRate");
		final String sampleRateTolerance = params.get("sampleRateTolerance");
		final String deviceControl = params.get("deviceControl");
		final String groupId = params.get("groupId");
		final String rfFlowId = params.get("rfFlowId");
		
		String usesDevice = "<usesdevice id=\"" + usesDeviceId + "\">";
		String propertyRef = "<propertyref refid=\"DCE:cdc5ee18-7ceb-4ae6-bf4c-31f983179b4d\" value=\"FRONTEND::TUNER\"/>";
		String deviceModel = "<propertyref refid=\"DCE:0f99b2e4-9903-4631-9846-ff349d18ecfb\" value=\"RX_DIGITIZER simulator\"/>";
		String structRef = "<structref refid=\"FRONTEND::tuner_allocation\">";
		String simpleRef1 = "<simpleref refid=\"FRONTEND::tuner_allocation::tuner_type\" value=\"" + tunerType + "\"/>";
		String simpleRef2 = "<simpleref refid=\"FRONTEND::tuner_allocation::allocation_id\" value=\"" + allocationId + "\"/>";
		String simpleRef3 = "<simpleref refid=\"FRONTEND::tuner_allocation::center_frequency\" value=\"" + centerFrequency + "\"/>";
		String simpleRef4 = "<simpleref refid=\"FRONTEND::tuner_allocation::bandwidth\" value=\"" + bandwidth + "\"/>";
		String simpleRef5 = "<simpleref refid=\"FRONTEND::tuner_allocation::bandwidth_tolerance\" value=\"" + bandwidthTolerance + "\"/>";
		String simpleRef6 = "<simpleref refid=\"FRONTEND::tuner_allocation::sample_rate\" value=\"" + sampleRate + "\"/>";
		String simpleRef7 = "<simpleref refid=\"FRONTEND::tuner_allocation::sample_rate_tolerance\" value=\"" + sampleRateTolerance + "\"/>";
		String simpleRef8 = "<simpleref refid=\"FRONTEND::tuner_allocation::device_control\" value=\"" + deviceControl + "\"/>";
		String simpleRef9 = "<simpleref refid=\"FRONTEND::tuner_allocation::group_id\" value=\"" + groupId + "\"/>";
		String simpleRef10 = "<simpleref refid=\"FRONTEND::tuner_allocation::rf_flow_id\" value=\"" + rfFlowId + "\"/>";

		return "(?s).*" + usesDevice + ".*" + propertyRef + ".*" + deviceModel + ".*" + structRef + ".*" + simpleRef1 + ".*" + simpleRef2 + ".*"
		 + simpleRef3 + ".*" + simpleRef4 + ".*" + simpleRef5 + ".*" + simpleRef6 + ".*" + simpleRef7 + ".*" + simpleRef8 + ".*" + simpleRef9 + ".*"
		+ simpleRef10 + ".*";
	}

}
